{"config":{"lang":["en"],"separator":"[\\s]","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Webserver Deployment","text":"<p>Als kleines Projekt sollt ihr automatisiert einen Webserver in einem Container erstellen. Um die Automatisierung auszuf\u00fchren nutzen wir die Ansible Automation Platform (kurz AAP), bzw. ihr Open Source Pendant AWX. Die AAP ist ein Web-UI f\u00fcr die einfache Ausf\u00fchrung von Ansible Automatisierung.</p> <p>Das Web UI ist erreichbar unter:</p> <p> \u00a0 https://massive-major-pug.ngrok-free.app </p> <p>Info</p> <p>Ihr werdet mit einem Warnheinweis begr\u00fc\u00dft, keine Panik, die AWX-Instanz steht in meinem Homelab und ich gebe sie \u00fcber diesen Link kurzzeitig frei. Klickt auf den Button Visit Site und ihr werdet auf die AWX-Login-Seite weitergeleitet! </p> <p>Ihr k\u00f6nnt euch mit eurem Vornamen und dem folgenden Standart-Passwort einloggen:</p> <pre><code>demo123!\n</code></pre>"},{"location":"#1-projekt-erstellen","title":"1. Projekt erstellen","text":"<p>In der AAP Oberfl\u00e4che auf der linken Seite unter Resources den Punkt Projects w\u00e4hlen. Klickt oben auf den Button Add, es \u00f6ffnet sich eine Maske mit Eingabe-Feldern. Ihr m\u00fcsst lediglich die mit einem roten Sternchen markierten Felder zwingend ausf\u00fcllen, alles weitere ist optional.</p> <p>Gebt eurem Projekt einen Namen, z.B. <code>QeP Demo</code>.</p> <p>W\u00e4hlt aus der Liste Source Control Credential Type den Punkt Git, es werden dadurch weitere Felder angezeigt.</p> <p>Im Feld Source Control URL tragt ihr die folgende Adresse ein:</p> <pre><code>https://github.com/TimGrt/automation-demo\n</code></pre> <p>Tip</p> <p>Ihr k\u00f6nnt die Adresse rechts mit einem kleinen Button (Copy to Clipboard) kopieren.</p> <p>Bei den Checkboxen unter Options w\u00e4hlt ihr Update Revision on Launch aus.</p> <p>Abschlie\u00dfend w\u00e4hlt ihr unten den Button Save.</p> Wozu das Ganze? <p>Ein Project in der AAP zeigt auf ein Repository, quasi einen (versionskontrollierten) Ordner mit allem Code f\u00fcr die Automatisierung. In unserem Fall liegt der gesamte Code f\u00fcr die Ansible Automatisierung in einem (\u00f6ffentlich zug\u00e4nglichen) Github Repository, die AAP zieht sich also den Code aus diesem Ordner und sorgt (durch die Auswahl der Checkbox) daf\u00fcr, dass vor jeder Ausf\u00fchrung der Automatisierung der aktuellste Stand geladen wird.</p>"},{"location":"#2-job-template-erstellen","title":"2. Job Template erstellen","text":"<p>Nachdem der Code f\u00fcr die Automatisierung in der AAP verf\u00fcgbar ist, wollen wir ihn auch ausf\u00fchren k\u00f6nnen. Dazu wird ein Job Template erstellt.  </p> <p>In der AAP Oberfl\u00e4che auf der linken Seite unter Resources den Punkt Templates w\u00e4hlen. Klickt oben auf den Button Add und Add Job Template, es \u00f6ffnet sich eine Maske mit Eingabe-Feldern.</p> <p>Die folgende Tabelle zeigt alle zu bef\u00fcllenden Felder:</p> Feld Inhalt Name <code>Webserver Deployment</code> Job Type <code>Run</code> Inventory <code>QeP Inventory</code> Project <code>QeP Demo</code> Execution Environment <code>QeP EE</code> Playbook <code>welcome.yml</code> Credentials <code>EC2 instance SSH Key</code> <p>Speichert euer Job Template mit dem Button Save.</p> <p>Noch nicht ausf\u00fchren!</p> <p>F\u00fchrt das Job Template noch nicht aus, wir wollen den Webserver noch personalisieren!</p> <p>Im n\u00e4chsten Schritt f\u00fcgen wir dem Job Template noch ein Survey hinzu, eine Abfrage, um eine Variable im Ansible Code zu setzen.</p> Wozu das Ganze? <p>In einem Job Template wird ein Automatisierungs-Run festgelegt, damit l\u00e4sst sich die Automatisierung sp\u00e4ter ausf\u00fchren (so oft wir wollen!). Dazu m\u00fcssen wir festlegen, welchen Code wollen wir ausf\u00fchren wollen. Wir verweisen also auf das \"Project und w\u00e4hlen daraus ein sogenantes Playbook (hier drin steht der wirkliche Code). Ebenfalls m\u00fcssen wir festlegen wo wir den Code ausf\u00fchren wollen, das steht im Inventory. Das Credential legt fest wie wir uns mit dem Zielhost (oder den vielen Zielhosts) verbinden, wir m\u00fcssen uns dort einloggen (authentifizieren). Als letztes brauchen wir noch eine Ausf\u00fchrungsumgebung, ein Execution Environment*, es beinhaltet alles um den Code ausf\u00fchren zu k\u00f6nnen.</p>"},{"location":"#3-survey-erstellen","title":"3. Survey erstellen","text":"<p>Um den Webserver \u00fcber eine Variable zu personalisieren erstellt ihr ein sogenanntes Survey, eine interaktive Abfrage, welche beim Start des Job Templates aufgerufen wird. Falls ihr nicht mehr auf der \u00dcbersichtsseite eures Templates seid, w\u00e4hlt aus den Resources wieder Templates und klickt auf euer erstelltes Job Template. Ein Survey kann in der Men\u00fcleiste des Templates ganz rechts hinzugef\u00fcgt werden.</p> <p></p> <p>Klickt im Survey-Tab auf den Button Add. In das Question-Feld tragt ihr Wie ist dein Name? ein, die Answer variable name muss den folgenden Inhalt haben:</p> <pre><code>attendee\n</code></pre> <p>Variablenname korrekt?</p> <p>Nur wenn der Name der Variablen exakt <code>attendee</code> lautet, kann die Automatisierung euren Webserver personalisieren.</p> <p>Speichert das Survey mit dem Button Save.</p> <p>Auf der Survey-\u00dcbersichtsseite m\u00fcsst das die Abfrage noch aktivieren, klickt auf den Slider bis er blau hinterlegt ist:</p> <p></p>"},{"location":"#4-automatisierung-ausfuhren","title":"4. Automatisierung ausf\u00fchren","text":"<p>Alles ist vorbereitet, jetzt kann die Automatisierung ausgef\u00fchrt werden! W\u00e4hlt aus den Resources wieder Templates aus. Neben eurem Job Template seht ihr ein kleines Raketen-Symbol (), klickt drauf, f\u00fcllt die Abfrage aus und klickt im Preview-Tab auf den Launch Button!</p> <p>Sobald das Playbook durchgelaufen ist, solltet ihr im Output-Feld unten die folgende Meldung bekommen:</p> <pre><code>RUNNING HANDLER [welcome-html-container : Container_info] *****************************************************************************************************************************************************************\nok: [192.168.178.126] =&gt; {\n    \"msg\": \"Open your browser and input this address &gt;&gt; http://192.168.178.126:8080\"\n}\n</code></pre> <p>Falls der Output abgeschnitten ist, wechselt kurz in den Tab Details und wieder zur\u00fcck auf Output. \u00d6ffnet einen neuen Tab im Browser und tragt die angezeigt Addresse ein (die Adresse wird bei jedem von euch unterschiedlich sein). Ihr k\u00f6nnt auch auf den Task selbst klicken, es \u00f6ffnet sich Host Details, dort auf den Tab JSON, hier l\u00e4sst sich die Adresse mit der Maus markieren und kopieren.</p>"}]}